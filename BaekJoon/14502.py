# 백준14502 : 연구소
# ⠀⠀⠀ ⠀⠸⣿⢹⣿⣼⠃⢀⣾⣇⠀⢿⡇⠀⡘⣿⠁⠀⠀⠀⠀⢹⣷⠀⣼⡏⠀⣰⣷⠀⠘⣿⣿⠀ ⢸⣿⠀⣰⣷⡀⠀⠀⠀⠀⠀⠀
# ⠀⠀⠀⠀ ⠀⢹⡿⢻⡏⠀⣿⠛⣿⣆⣸⣇⣠⡄⣿⣀⣤⠀⠀⠀⣸⡘⣷⢻⣇⢠⡟⢻⣧⣸⣿⢻⣄⢸⣏⣠⡟⢛⣷⡀⠀⠀⠀⠀⠀
# ⠀⠀⠀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
#  ⠀⢸⣿⡟⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⣿⣿⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⣿⣿⡇⠀⠀
#  ⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀   ⠀⠀⠀ ⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀  ⣿⣿⡇⠀⠀
#  ⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⠴⠶⠿⠿⠷⠶⠶⠶⠤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀     ⠀⠀⣿⣿⡇⠀⠀
#  ⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⠶⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣦⡀⠀⠀⠀⠀⠀⠀      ⠀ ⠀⣿⣿⡇⠀⠀
# ⠀⠀⢸⣿⡇⠀⠀⠀⠀⢸⠷⣼⣦⣀⡴⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣆⠀⠀⠀⠀⠀      ⠀ ⠀⣿⣿⡇
#  ⠀⢸⣿⡇⠀⠀⠀⠀⢸⠀⣿⠀⠉⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣆⠀⠀⠀⠀⠀       ⠀⠀⣿⣿⡇⠀⠀
# ⠀⠀⢸⣿⣇⠀⠀⠀⠀⢸⠀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⣿⠀⠀⠀⠀⠀⠀        ⣿⣿⡇
#  ⠀⢸⣿⡇⠀⠀⠀⠀⢸⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀       ⠀⣿⣿⡇⠀⠀
#  ⠀⢸⣿⡇⠀⠀⠀⠀⣾⡀⠀⠀⠀⠀⠀⠀⠀⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣠⡟⠀⠀⠀⠀⠀⠀       ⠀⣿⣿⡇⠀⠀
#  ⠀⢸⣿⡇⠀⠀⠀⣸⠃⠀⠐⠀⠀⠀⠉⠐⠂⠤⢀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⢀⣀⠠⠄⠒⢺⡟⠀⠀⠀⠀ ⠀⠀⠀     ⣿⣿⡇
#  ⠀⢸⣿⣧⣤⣀⣀⣯⠀⠀⡆⠀⠀⢨⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⠉⠑⢆⠀⠉⠀⠀⠀⠀⢀⠸⠿⣦⣀⣀⣀⡀⢀⣀    ⣀⣿⣿⣇
#  ⠀⢸⣿⣿⣿⣿⣿⣿⣄⠂⠇⠀⠀⠘⠀⠀⠀⠀⢠⠀⠀⠀⠀⠂⠀⢳⢸⠤⠄⠒⠀⠉⠀⢸⢿⣆⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇
#  ⠀⢸⣿⣿⠆⠀⠀⠀⠹⢦⡔⠄⠰⠄⠵⠔⠦⠰⠔⠆⠤⠼⣄⢸⠿⡾⠘⠀⣀⠀⠴⡆⠀⠃⠘⣟⠁⠀⠀⠀⠀    ⠉⠉⣿⣿⡇
# ⠀⠀⢸⣿⡟⠀⠀⠀⠀⠀⠈⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠃⠃⢲⠉⠀⠀⠀⠃⠀⠁⢠⣧⡀⠀⠀⠀⠀⠀⠀      ⠀⣿⣿⡇
#  ⠀⢸⣿⡇⠀⠀⠀⠀⠀⢀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⠶⣦⠀⠀⠀       ⠀⠀⣿⣿⡇
#  ⠀⢸⣿⡇⠀⠀⠀⠀⢠⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡅⡀⠀⠀⠀⢂⠀⠀⠀⠀⠀⠀⢿⣦⠀⠀⠀⠀       ⣿⣿⡧
#  ⠀⢸⣿⡇⠀⠀⠀⠀⠈⠛⠲⣶⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢇⠱⡀⠀⠀⠈⠣⣀⣀⠀⠄⠀⣼⡿⠀⠀⠀      ⠰⣿⣿⡇
#  ⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠈⠷⣤⡀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡄⠳⢄⠀⠀⠀⠀⠀⠀⢸⣿⡏⠁⣶⣷⠀       ⣿⣿⣿
#  ⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣷⠀⠀⠀⠀⠀⣠⣊⠀⠀⠀⠀⠀⠀⠢⣀⠙⠲⠤⠤⢤⣶⣿⣧⣴⣾⣟⠰⠀⠀      ⣿⣿⡏
#  ⠀⢸⣿⡇⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⢻⣦⣤⣤⡶⠟⠋⢿⠻⣦⠀⠀⠀⠀⠀⠈⠙⠒⢲⣶⠿⠁⠘⢻⣯⣽⠟⢻⡛⠉⣿⣿⡟⠊⠉
#  ⠀⠘⠿⣿⣶⣶⣶⣶   ⠀⠀⠀⠀⠀ ⠀      ⠜⣿⣧⠀⠀⠀⠀⠀⠀⢠⣿⠃⣀⠀⣥⣾⢿⠻⣆⢀⣸⣿⣿⡿
#    ⠀⠀⠀⠙⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀       ⣿⣿⠀⠀⠀⠀⠀⣰⣿⠃⠛⠛⢁⠛⠛⢛⣿⣿⣿⣿⡟⠙
#            ⠙⢿⣿⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀   ⣿⣿⠀⠀⢀⣤⡾⣿⡵⢮⡖⠀⢙⣼⣿⣿⡿⠋⠉
#             ⠀⠀⠈⠛⢿⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣤⡶⠟⠋⢻⡏⣰⣿⣿⣾⡿⠟⣩
#                 ⠀⠀⠈⠛⠿⣷⣦⣀⠀⠀⠀⠀⣿⣿⠁⠀⠀⠀⣠⣴⣿⣿⣟⠋⠀
#                      ⠀⠈⠙⠿⣷⣦⣄⠀⣿⣿⣄⣠⣴⣿⠿⡟⢻
#                            ⠀⠈⠙⠻⣿⣿⣿⣿⠿⠋⠁⠀
#                                 ⠉⠈⡉⠋⠀
from collections import deque, Counter
from copy import deepcopy
import sys ; input = sys.stdin.readline

def joyGo() : 
    mm = deepcopy(m)
    dq = deque()
    for i in range(N) : 
        for j in range(M) : 
            if mm[i][j] == 2 : dq.append((i, j))

    while dq : 
        x, y = dq.popleft()
        for k in range(4) : 
            nx = x + dx[k]
            ny = y + dy[k]
            if (0 <= nx < N) and (0 <= ny < M) and (not mm[nx][ny]) : 
                mm[nx][ny] = 2
                dq.append((nx, ny))
    
    cnt = 0
    for i in range(N) : 
        cnt += Counter(mm[i])[0]
    global answer
    answer = max(answer, cnt)

def wallMaria(cnt) : 
    if cnt==3 : joyGo() ; return
    for i in range(N) : 
        for j in range(M) : 
            if not m[i][j] : 
                m[i][j] = 1
                wallMaria(cnt+1)
                m[i][j] = 0

if __name__ == "__main__" : 
    N, M = map(int, input().split())
    m = [list(map(int, input().split())) for _ in range(N)]
    dx = [1, -1, 0, 0]
    dy = [0, 0, 1, -1]
    
    answer = 0
    wallMaria(0)
    print(answer)