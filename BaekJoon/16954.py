# 백준16954 : 움직이는 미로 탈출
import sys; input = sys.stdin.readline
from typing import List
from collections import deque

def joyGo(board: List[List[str]]) -> int: 
    SIZE = 8

    walls = set((i, j) for i in range(SIZE) for j in range(SIZE) if board[i][j] == '#')

    dq = deque([(SIZE-1, 0)])
    visited = set()

    adjacent = ((-1,1), (0,1), (1,1), (1,0), (1,-1), (0,-1), (-1,-1), (-1,0), (0,0))

    while dq: 
        for _ in range(len(dq)): 
            x, y = dq.popleft()

            if (x == 0) and (y == SIZE-1): 
                return 1
            elif (x, y) in walls: 
                continue

            for dx, dy in adjacent: 
                nx, ny = x+dx, y+dy
                if (0 <= nx < SIZE) and (0 <= ny < SIZE) and (not (nx, ny) in visited) and (not (nx, ny) in walls): 
                    dq.append((nx, ny))
                    visited.add((nx, ny))
        
        walls = set((x+1, y) for x, y in walls if x < SIZE-1)
        if walls: 
            visited = set()

    return 0


if __name__ == "__main__": 
    board = [list(input().strip()) for _ in range(8)]

    print(joyGo(board))



# ㅠㅠㅠㅠㅠㅠ < Test code / please ignore this lines. > ㅠㅠㅠㅠㅠㅠ
import pytest

@pytest.mark.parametrize(
    ("case_num, board, ans"), 
    [
        (
            1, 
            [['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.']], 
            1
        ), 
        (
            2, 
            [['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['#', '#', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.']], 
            0
        ), 
        (
            3, 
            [['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '#', '.', '.', '.', '.', '.', '.'], ['#', '.', '.', '.', '.', '.', '.', '.'], ['.', '#', '.', '.', '.', '.', '.', '.']], 
            0
        ), 
        (
            4, 
            [['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '#', '#', '#', '#', '#', '#', '#'], ['#', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.']], 
            1
        ), 
        (
            5, 
            [['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['#', '.', '.', '.', '.', '.', '.', '.'], ['.', '#', '#', '#', '#', '#', '#', '#'], ['#', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.']], 
            0
        ), 
        (
            6, 
            [['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.'], ['#', '.', '.', '.', '.', '.', '.', '.'], ['.', '#', '.', '.', '.', '.', '.', '.'], ['.', '#', '.', '.', '.', '.', '.', '.']], 
            1
        )
    ]
)

def test_joyGo(case_num: int, board: List[List[str]], ans: int) -> None: 
    res = joyGo(board)
    assert res == ans, f"Test case {case_num} - 틀렸습니다. (your result: {res} / answer: {ans})"
# ㅛㅛㅛㅛㅛㅛ < Test code / please ignore this lines. > ㅛㅛㅛㅛㅛㅛ