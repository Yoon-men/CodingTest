# 백준4179 : 불!
import sys; input = sys.stdin.readline
from typing import List
from collections import deque

def joyGo(R: int, C: int, board: List[List[str]]) -> str: 
    dx, dy = [-1,1,0,0], [0,0,1,-1]

    visited = [[0 for _ in range(C)] for _ in range(R)]
    dq = deque()

    for i in range(R): 
        for j in range(C): 
            if board[i][j] == 'J': 
                visited[i][j] = 1
                dq.appendleft((i, j))
            elif board[i][j] == 'F': 
                visited[i][j] = -1
                dq.append((i, j))
            elif board[i][j] == '#': 
                visited[i][j] = -2

    while dq: 
        x, y = dq.popleft()
        if (visited[x][y] >= 0) and ((x == 0) or (x == R-1) or (y == 0) or (y == C-1)): return str(visited[x][y])

        for i in range(4): 
            nx, ny = x+dx[i], y+dy[i]
            if (0 <= nx < R) and (0 <= ny < C): 
                if (visited[x][y] == -1) and (visited[nx][ny] >= 0): 
                    visited[nx][ny] = -1
                    dq.append((nx, ny))
                elif (visited[x][y] > 0) and (visited[nx][ny] == 0): 
                    visited[nx][ny] = visited[x][y] + 1
                    dq.append((nx, ny))
    
    return "IMPOSSIBLE"


if __name__ == "__main__": 
    R, C = map(int, input().split())
    board = [list(input().strip()) for _ in range(R)]

    print(joyGo(R, C, board))



# ㅠㅠㅠㅠㅠㅠ < Test code / please delete the contents of this lines. > ㅠㅠㅠㅠㅠㅠ
import pytest

@pytest.mark.parametrize(
    ("case_num, R, C, board, ans"), 
    [
        (1, 4, 4, [['#', '#', '#', '#'], ['#', 'J', 'F', '#'], ['#', '.', '.', '#'], ['#', '.', '.', '#']], '3'), 
        (2, 3, 4, [['#', '#', '.', '#'], ['F', 'J', '.', '#'], ['#', '#', 'F', '#']], "IMPOSSIBLE"), 
        (3, 5, 5, [['F', 'F', 'F', 'F', 'F'], ['.', '.', 'J', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.']], '4'),

    ]
)

def test_joyGo(case_num: int, R: int, C: int, board: List[List[str]], ans: str) -> None: 
    res = joyGo(R, C, board)
    assert res == ans, f"Test case {case_num} - 틀렸습니다. (your result: {res} / answer: {ans})"
# ㅛㅛㅛㅛㅛㅛ < Test code / please delete the contents of this lines. > ㅛㅛㅛㅛㅛㅛ